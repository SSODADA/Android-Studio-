# 레이아웃

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:padding="30dp"
        android:orientation = "vertical">

        <EditText
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="입력하세요."
            android:id="@+id/edit1"/>

    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>

# 자바코드

package com.example.myapplication

import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // XML에서 정의된 EditText를 연결합니다.
        val editText = findViewById<EditText>(R.id.edit1)

        // EditText에 텍스트 변경 리스너를 추가합니다.
        editText.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {
                // 텍스트가 변경되기 전 호출 (필요하면 구현)
            }

            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {
                // 텍스트가 변경될 때마다 호출됩니다.
                // 전체 입력된 텍스트를 Toast로 표시합니다.
                Toast.makeText(this@MainActivity, "입력된 텍스트: $s", Toast.LENGTH_SHORT).show()
            }

            override fun afterTextChanged(s: Editable) {
                // 텍스트 변경이 완료된 후 호출 (필요하면 구현)
            }
        })
    }
}
